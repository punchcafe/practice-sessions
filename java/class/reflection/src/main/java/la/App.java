/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package la;

import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
//import java.util.function.
import java.util.function.Supplier;
import java.util.function.Function;

public class App {

    public String getGreeting() {
        return "Hello world.";
    }


    public static void main(String[] args) {
        final TestClass practice = new TestClass();
        final OtherClass otherPractice = new OtherClass();
        System.out.println(practice instanceof TestClass);
        System.out.println(practice.getClass().getSimpleName());
        Method methodMan;
        /*
        try {
            methodMan = practice.getClass().getMethod("theMethod");
            Annotation[] tester = practice.getClass().getAnnotations();
            methodMan.invoke(practice);
        } catch (Exception e) {
            e.printStackTrace();
        }

         */

        final var testClassHandler = new TestClassHandler();
        final var otherClassHandler = new OtherClassHandler();

        Map<Class, HandlingStrategy> handlingStrategyMap = new HashMap<>();
        List<HandlingStrategy> handlers = new ArrayList<>();
        handlers.add(testClassHandler);
        handlers.add(otherClassHandler);
        handlers.stream().forEach(handler -> handlingStrategyMap.put(handler.applicableClass(), handler));

        final var listOfTesters = List.of(otherPractice, practice);
        listOfTesters.stream().forEach((object) -> {
            final var strategy = handlingStrategyMap.get(object.getClass());
            strategy.setValueCallBack(object).accept(5);
        });

        Runnable r = new Runnable() {

            @Override
            public void run() {

            }
        };

        () -> r.run()

        final var practiceGetterCallBack = testClassHandler.getValueCallback(practice);
        final var otherPracticeGetterCallBack = otherClassHandler.getValueCallback(otherPractice);

        System.out.println(practiceGetterCallBack.get());
        System.out.println(otherPracticeGetterCallBack.get());

        //Consumer<TestClass> testConsumer = TestClass::getSomeNumber;
        //Consumer<TestClass> testMethodRefferenceConsumer = TestClass::getSomeNumber;
        //System.out.println(testConsumer.equals(testMethodRefferenceConsumer));
        //Function<> myInterface = () -> System.out.println("hi there!");
    }
}

@TestAnnotate(someValue = "helloWorld")
class TestClass {

    private int someNumber;
    private String[] someStringArray;

    public void setSomeNumber(final int someNumber) {
        this.someNumber = someNumber;
    }

    public int getSomeNumber() {
        return someNumber;
    }

}

class OtherClass {

    private int someNumber;
    private String[] someStringArray;

    public void setSomeNumber(final int someNumber) {
        this.someNumber = someNumber;
    }

    public int getSomeNumber() {
        return someNumber;
    }

}

interface HandlingStrategy<T> {

    public Class<T> applicableClass();

    public Consumer<Integer> setValueCallBack(T instance);

    public Supplier<Integer> getValueCallback(T instance);
}

class TestClassHandler implements HandlingStrategy<TestClass> {

    public Class<TestClass> applicableClass() { return TestClass.class; }

    @Override
    public Consumer<Integer> setValueCallBack(TestClass instance) {
        return instance::setSomeNumber;
    }

    @Override
    public Supplier<Integer> getValueCallback(TestClass instance) {
        return instance::getSomeNumber;
    }

}

class OtherClassHandler implements HandlingStrategy<OtherClass> {

    public Class<OtherClass> applicableClass() { return OtherClass.class; }

    @Override
    public Consumer<Integer> setValueCallBack(OtherClass instance) {
        return instance::setSomeNumber;
    }

    @Override
    public Supplier<Integer> getValueCallback(OtherClass instance) {
        return instance::getSomeNumber;
    }

}


@Retention(RetentionPolicy.RUNTIME)
@interface TestAnnotate {

    public String someValue();
}
